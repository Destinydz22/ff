TIẾP THEO LOẠT BÀI TẬP  VỀ DANH SÁCH LIÊN KẾT ĐÔI
MỘT ƯU ĐIỂM CỦA DSLK ĐÔI SO VỚI DSLK ĐƠN:

- Cho phép truy xuất đến phần tử đứng trước một phần tử bất kỳ nào đó. Từ đó,  thao tác thêm 1 phần tử vào vị trí bất kỳ trong danh sách trở nên dễ dàng hơn.

 

MÔ TẢ BÀI TOÁN

Viết 1 chương trình game đơn giản như sau:

- Chương trình cho phép người dùng (user) chọn thực hiện 1 thao tác nào đó từ Menu, trả về kết quả thực hiện thao tác đó.

- Viết hàm cho phép thêm các giá trị y  vào sau (hoặc vào trước) các  giá trị x có trong danh sách. Nếu có nhiều giá trị x được lưu trữ trong danh sách thì chèn thêm giá trị y vào sau tất cả các giá trị x đó. Nếu danh sách không chứa x thì không thêm gì cả và  xuất thông báo  theo câu lệnh: cout << "\nCan't find the value "<<x;

 

INPUT & OUTPUT

 -  Theo template
 
 
 
 void init(DList& L)
{
    L.pHead = L.pTail = NULL;
}
DNode* CreateNode(int x)
{
    DNode* p = new DNode;
    p->info = x;
    p->pNext = p->pPrev = NULL;
    return p;
}
void addTail(DList& L, int x)
{
    DNode* p = CreateNode(x);
    if (L.pHead == NULL)
        L.pHead = L.pTail = p;
    else
    {
        L.pTail->pNext = p;
        p->pPrev = L.pTail;
        L.pTail = p;
    }
}
void addHead(DList& L, int x)
{
    DNode* p = CreateNode(x);
    if (L.pHead == NULL)
        L.pHead = L.pTail = p;
    else
    {
        p->pNext = L.pHead;
        L.pHead->pPrev = p;
        L.pHead = p;
    }
}
void createList(DList& L)
{
    while (true)
    {
        int x;
        cin >> x;
        if (x == -1)
            break;
        addTail(L, x);
    }
}
void printList(DList L)
{
    if (L.pHead == NULL)
    {
        cout << "List is empty";
        return;
    }
    DNode* pTmp = L.pHead;
    while (pTmp != NULL)
    {
        cout << pTmp->info << " ";
        pTmp = pTmp->pNext;
    }
}
void addAfter(DList& L, int x, int y)
{
    DNode* pTmpx = L.pHead;
    while (pTmpx != NULL)
    {
        if (pTmpx->info == x)
            break;
        pTmpx = pTmpx->pNext;
    }
    if (pTmpx == NULL)
    {
        cout << "\nCan't find the value " << x;
        return;
    }
    else
    {
        DNode* py = CreateNode(y);
        if (pTmpx == L.pTail)
        {
            addTail(L, y);
        }
        else
        {
            DNode* p = pTmpx->pNext;
            py->pNext = p;
            py->pPrev = pTmpx;
            p->pPrev = py;
            pTmpx->pNext = py;
        }
    }
}
void addBefore(DList& L, int x, int y)
{
    DNode* pTmpx = L.pHead;
    while (pTmpx != NULL)
    {
        if (pTmpx->info == x)
            break;
        pTmpx = pTmpx->pNext;
    }
    if (pTmpx == NULL)
    {
        cout << "\nCan't find the value " << x;
        return;
    }
    else
    {
        DNode* py = CreateNode(y);
        if (pTmpx == L.pHead)
        {
            L.pHead->pPrev = py;
            py->pNext = L.pHead;
            L.pHead = py;
        }
        else
        {
            DNode* p = pTmpx->pPrev;
            py->pNext = pTmpx;
            py->pPrev = p;
            pTmpx->pPrev = py;
            p->pNext = py;
        }
    }
}
void addAfterMulti(DList& L, int x, int y)
{
    DNode* px = L.pHead;
    bool kq = false;
    while (px != NULL)
    {
        if (px->info == x)
        {
            if (px == L.pTail)
            {
                addTail(L, y);
            }
            else
            {
                DNode* py = CreateNode(y);
                DNode* p = px->pNext;
                py->pNext = p;
                py->pPrev = px;
                p->pPrev = py;
                px->pNext = py;
            }
            kq = true;
        }
        px = px->pNext;
    }
    if (kq == false)
        cout << "\nCan't find the value " << x;
}
void addBeforeMulti(DList& L, int x, int y)
{
    DNode* px = L.pHead;
    bool kq = false;
    while (px != NULL)
    {
        if (px->info == x)
        {
            if (px == L.pHead)
            {
                addHead(L, y);
            }
            else
            {
                DNode* py = CreateNode(y);
                DNode* p = px->pPrev;
                py->pNext = px;
                py->pPrev = p;
                px->pPrev = py;
                p->pNext = py;
            }
            kq = true;
        }
        px = px->pNext;
    }
    if (kq == false)
        cout << "\nCan't find the value " << x;
}
