MÔ TẢ BÀI TOÁN

Người ta sử dụng cây NPTK với mục đích tìm kiếm nhanh. Hãy viết các hàm thực hiện yêu cầu tìm kiếm sau: Tìm phần tử lớn thứ 2 trong cây.

Ví dụ: phần tử lớn thứ 2 trong cây bên dưới là 50



 

INPUT

- Một số nguyên dương n, chỉ số nút của cây, 0<n<100

- Dãy gồm n số nguyên, đôi một khác nhau. Các giá trị được thêm vào cây theo thứ tự mà nó được nhập.

OUTPUT

- Xuất theo mẫu ví dụ bên dưới.

- Trường hợp không có phần tử lớn thứ 2 thì không xuất ra thông tin gì cả



struct Node
{
    int info;
    Node* pLeft;
    Node* pRight;
};

typedef struct Node* Tree;

Node* getNode(int x)
{
    Node* p = new Node;
    if (p == NULL)
    {
        cout << "khong du bo nho";
        return NULL;
    }
    p->info = x;
    p->pLeft = p->pRight = NULL;
    return p;
}

void insertNode(Tree& T, int x)
{
    if (T == NULL)
    {
        Tree p = new Node;
        p->info = x;
        p->pLeft = NULL;
        p->pRight = NULL;
        T = p;
    }
    else
    {
        if (x < T->info)
            insertNode(T->pLeft, x);
        else
            insertNode(T->pRight, x);
    }
}

void inputTree(Tree& T)
{
    int n;
    cin >> n;
    int* a = new int[n];
    for (int i = 0; i < n; i++)
    {
        cin >> a[i];
        insertNode(T, a[i]);
    }
}

void SearchStandFor(Tree& X, Tree& Y)
{

    if (Y->pRight != NULL)
    {
        SearchStandFor(X, Y->pRight);
    }
    else
    {
        X->info = Y->info;
        X = Y;
        Y = Y->pLeft;
    }

}

void deleteNode(Tree& t, int x)
{
    if (t == NULL)
    {
        return;
    }
    else
    {

        if (x < t->info)
        {
            deleteNode(t->pLeft, x);
        }
        else if (x > t->info)
        {
            deleteNode(t->pRight, x);
        }
        else
        {
            Node* X = t;
            if (t->pLeft == NULL)
            {
                t = t->pRight;
            }
            else if (t->pRight == NULL)
            {
                t = t->pLeft;
            }
            else
            {
                SearchStandFor(X, t->pLeft);
            }
            delete X;
        }
    }
}

int GTLN(Tree T)
{
    if (T == NULL)
        return -99999;
    int i = T->info;
    if (T->pLeft != NULL) 
        i = max(GTLN(T->pLeft), i);
    if (T->pRight != NULL)
        i = max(GTLN(T->pRight), i);
    return i;

}

void secondLargest(Tree T)
{
    if (T == NULL) return;
    if (T->pLeft == NULL && T->pRight == NULL)
        return;
    int x = GTLN(T);
    deleteNode(T, x);
    int y = GTLN(T);
    cout << "2nd largest value is " << y;
}
