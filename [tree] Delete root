MÔ TẢ BÀI TOÁN

Xuất cây sau khi xóa m lần nút gốc (m nhập từ bàn phím)

YÊU CẦU: CHỌN PHẦN TỬ THAY THẾ LÀ Phần tử trái nhất trên cây con phải

INPUT

- Một số nguyên dương n, chỉ số nút của cây, 0<n<100

- Dãy gồm n số nguyên, đôi một khác nhau. Các giá trị được thêm vào cây theo thứ tự mà nó được nhập.

- Số nguyên dương m, 0<m.

OUTPUT

- Xuất cây trước và sau khi xóa m lần nút gốc


struct node
{
	int info;
	node* left;
	node* right;
};
typedef node* Tree;
node* getnode(int x)
{
	node* p = new node;
	if (p == NULL)
		return NULL;
	p->info = x;
	p->left = p->right = NULL;
	return p;
}
void insert(node*& t, int x)
{
	if (t == NULL)
	{
		node* p = new node;
		p->info = x;
		p->left = NULL;
		p->right = NULL;
		t = p;
	}
	else
	{
		if (x < t->info)
			insert(t->left, x);
		else if (x > t->info)
			insert(t->right, x);
	}
}
void inputTree(Tree& t)
{

	int n, x;
	cin >> n;

	for (int i = 0; i < n; i++)
	{
		cin >> x;
		insert(t, x);
	}
}
void NLR(Tree t)
{
	if (t != NULL)  //dieu kien dung
	{
		cout << t->info << " "; //xu ly tuong ung voi nhu cau
		NLR(t->left); // goi de quy
		NLR(t->right); //goi de quy
	}

}

void SearchStandFor(Tree& p, Tree& q)
{
	if (q->left)
		SearchStandFor(p, q->left);
	else
	{
		p->info = q->info;
		p = q;
		q = q->right;
	}
}
void deleteRoot(Tree& t, int x)
{
	if (t == NULL)
	{
		return;
	}
	else
	{
		int i = 0;
		while (i < x)
		{
			if (t == NULL)
			{
				return;
			}
			else
			{
				node* p = t;
				if (t->left == NULL)
				{
					t = t->right;
				}
				else
					if (t->right == NULL)
					{
						t = t->left;
					}
					else
					{
						SearchStandFor(p, t->right);
					}
				delete p;
				i++;
			}
		}


	}
}
