Hãy viết chương trình thực hiện thao tác “Nối 1 danh sách liên kết vào 1 danh sách khác” với những yêu cầu sau:

- Nhập một danh sách gồm n phần tử (gọi là L1). Thêm phần tử mới vào cuối danh sách.

- Xuất danh sách L1. Nếu danh sách rỗng thì xuất thông báo "List is empty".

- Nhập danh sách thứ 2  tương tự như trên (gọi là L2).

- Thực hiện việc Nối danh sách L2 vào danh sách L1. Xuất lại L1 để kiểm tra.

INPUT

 - Số nguyên đầu tiên là n (0 <= n <= 1.000.000). Đây là số lượng phần tử trong danh sách thứ 1.

- n số nguyên tiếp theo là các giá trị được lưu vào danh sách thứ 1, có giá trị không quá 2 tỷ.

- Một số nguyên m (0 <= m <= 1.000.000) là số lượng phần tử trong danh sách thứ 2

- m số nguyên tiếp theo là các giá trị được lưu vào danh sách thứ 2, có giá trị không quá 2 tỷ.

 **SV không cần kiểm tra điều kiện nhập

OUTPUT

- Xuất theo template





struct node {
    int data;
    node* pnext;
};
struct List {
    node* phead;
    node* ptail;
};
void Init(List& L) {
    L.phead = L.ptail = NULL;
}
node* getnode(int x) {
    node* p = new node;
    if (p == NULL) {
        cout << "Can't active node.";
        exit(1);
    }
    p->data = x;
    p->pnext = NULL;
    return p;
}
void add_tail(List& L, int x) {
    node* p = getnode(x);
    if (L.phead == NULL) {
        L.phead = p;
        L.ptail = p;
    }
    else {
        L.ptail->pnext = p;
        L.ptail = p;
    }
}
void inputList(List& L, int n) {
    if (n == 0) {
        L.phead = NULL;
        return;
    }
    for (int i = 1; i <= n; i++) {
        int x;
        cin >> x;
        add_tail(L, x);
    }

}
void outputList(List L) {
    node* Prc = L.phead;
    if (Prc == NULL) {
        cout << "List is empty";
    }
    while (Prc != NULL) {
        cout << Prc->data << " ";
        Prc = Prc->pnext;
    }
    return;
}
void add_head(List& L, int x) {
    node* p = getnode(x);
    if (L.phead == NULL) {
        L.phead = p;
        L.ptail = p;
    }
    else {
        p->pnext = L.phead;
        L.phead = p;
    }
}
void DelHead(List& L) 
{
    if (L.phead == NULL) return;
    else 
    {
        node* q = L.phead;
        L.phead = L.phead->pnext;
        q->pnext = NULL;
        delete(q);
    }
}
void concate(List& L1, List& L2)
{
    node* p = L2.phead;
    while (p != NULL) 
    {
        add_tail(L1, p->data);
        p = L2.phead->pnext;
        DelHead(L2);
    }
}
