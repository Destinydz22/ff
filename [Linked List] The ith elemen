Nhược điểm lớn nhất của danh sách liên kết so với mảng là không thể truy cập ngẫu nhiên. Việc này khiến một số thao tác vốn rất đơn giản trong mảng nhưng có thể trở nên phức tạp trong danh sách.

- Để truy cập một phần tử thứ i trong mảng a, một cách đơn giản ta chỉ cần dùng chỉ số và gọi a[i] là được, thời gian truy cập là tức thời.

- Đối với danh sách liên kết, truy xuất phần tử thứ i chậm vì phải duyệt tuần tự từ đầu danh sách cho đến khi gặp node thứ i

MÔ TẢ BÀI TOÁN

Hãy viết chương trình thực hiện thao tác “Tìm phần tử thứ i trong danh sách và xuất giá trị của phần tử đó”, biết rằng phần tử thứ 1 là phần tử ở đầu danh sách. Nếu index không hợp lệ thì xuất thông báo "The index is invalid".

INPUT

 - Số nguyên đầu tiên là n (0 <= n <= 1.000.000). Đây là số lượng phần tử trong danh sách.

- n số nguyên tiếp theo là các giá trị được lưu vào danh sách, có giá trị không quá 2 tỷ.

- Số nguyên i (0 <= i <= 1.000.000) là giá trị index được dùng để kiểm tra

 **SV không cần kiểm tra điều kiện nhập

OUTPUT

- Xuất theo template




struct node {
    int info;
    node* pnext;
};
struct List {
    node* phead;
    node* ptail;
};
void Init(List& L) {
    L.phead = L.ptail = NULL;
}
node* getnode(int x) {
    node* p = new node;
    if (p == NULL) {
        cout << "Can't active node.";
        exit(1);
    }
    p->info = x;
    p->pnext = NULL;
    return p;
}
void add_tail(List& L, int x) {
    node* p = getnode(x);
    if (L.phead == NULL) {
        L.phead = p;
        L.ptail = p;
    }
    else {
        L.ptail->pnext = p;
        L.ptail = p;
    }
}
void inputList(List& L, int n) {
    if (n == 0) {
        L.phead = NULL;
        return;
    }
    for (int i = 1; i <= n; i++) {
        int x;
        cin >> x;
        add_tail(L, x);
    }

}
void outputList(List L) {
    node* Prc = L.phead;
    if (Prc == NULL) {
        cout << "List is empty";
    }
    while (Prc != NULL) {
        cout << Prc->info << " ";
        Prc = Prc->pnext;
    }
    return;
}
void add_head(List& L, int x) {
    node* p = getnode(x);
    if (L.phead == NULL) {
        L.phead = p;
        L.ptail = p;
    }
    else {
        p->pnext = L.phead;
        L.phead = p;
    }
}

node* findElement(List L, int i) {
    node* ss = L.phead;
    node* p = NULL;
    if (L.phead == NULL) {
        cout << "List is empty";
        return NULL;
    }
    int total_index = 0;
    int dem = 0;
    while (ss != NULL) {
        total_index++;
        ss = ss->pnext;
    }
    if (total_index < i) {
        cout << "The index is invalid";
        return NULL;
    }
    ss = L.phead;
    while ( ss != NULL) {
        dem++;
        if (dem == i) {
            p = ss;
            break;
        }
        ss = ss->pnext;
    }
    return p;
}
