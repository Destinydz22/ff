MÔ TẢ BÀI TOÁN
Khai báo kiểu Cây nhị phân tìm kiếm có tên là Tree mà mỗi phần tử chứa một số nguyên. Hãy viết các hàm thực hiện các yêu cầu sau:

Xây dựng CNPTK gồm n số nguyên, theo thứ tự các giá trị được nhập từ bàn phím.

Duyệt cây theo thứ tự Node-Left-Right

Xoay trái quanh node gốc của cây



INPUT

- Một số nguyên dương n, chỉ số nút của cây, 0<n<100

- Dãy gồm n số nguyên dương, đôi một khác nhau. Các giá trị được thêm vào cây theo thứ tự mà nó được nhập.

 

OUTPUT

- Dòng dầu tiên là xuất cây vừa tạo theo NLR

- Nếu cây rỗng thì xuất cout<< "\nKhong the xoay vi cay rong";

- Nếu không xoay được thì xuất cout<< "\nKhong the xoay trai vi khong co nut con ben phai";

-Nếu xoay được thì xuất cây theo NLR để thấy sự thay đổi




#include <iostream>
using namespace std;
struct node
{
	int info;
	node* left;
	node* right;
};
typedef node* Tree;
node* getnode(int x)
{
	node* p = new node;
	if (p == NULL)
		return NULL;
	p->info = x;
	p->left = p->right = NULL;
	return p;
}
node* search(node* t, int x)
{
	if (t != NULL)
	{
		if (t->info == x)
			return t;
		if (x < t->info)
			return search(t->left, x); // return co nghia la den dich roi khong can tim nua, neu ko co reuturn thi co the se tim them o dau do nua
		return search(t->right, x);
	}
	return NULL;
}
void insert(node*& t, int x)
{
	if (t == NULL)
	{
		node* p = new node;
		p->info = x;
		p->left = NULL;
		p->right = NULL;
		t = p;
	}
	else
	{
		if (x < t->info)
			insert(t->left, x);
		else if (x > t->info)
			insert(t->right, x);
	}
}
void inputTree(Tree& t)
{

	int n, x;
	cin >> n;

	for (int i = 0; i < n; i++)
	{
		cin >> x;
		insert(t, x);
	}
}
void NLR(Tree t)
{
	if (t != NULL)  //dieu kien dung
	{
		cout << t->info << " "; //xu ly tuong ung voi nhu cau
		NLR(t->left); // goi de quy
		NLR(t->right); //goi de quy
	}

}
void LNR(Tree t)
{
	if (t != NULL)  //dieu kien dung
	{
		LNR(t->left); // goi de quy
		cout << t->info << " "; //xu ly tuong ung voi nhu cau
		LNR(t->right); //goi de quy
	}

}
void LRN(Tree t)
{
	if (t != NULL)  //dieu kien dung
	{
		LRN(t->left); // goi de quy
		LRN(t->right); //goi de quy
		cout << t->info << " "; //xu ly tuong ung voi nhu cau
	}

}
node* turnleft(Tree &t)
{
	if (t == NULL)
	{
		cout << "\nKhong the xoay vi cay rong";
	}
	else if(t->right == NULL)
	{
		cout << "\nKhong the xoay trai vi khong co nut con ben phai";
		return t;
	}
	else
	{
		node* p = t->right;

		t->right = p->left;
		p->left = t;
		return p;   //gốc mới
		t = turnleft(t);
	}
	
}
int main()
{
	Tree a = NULL;
	Tree T = NULL;
	inputTree(T);
	cout << "\nNLR: "; NLR(T);
	a = turnleft(T);
	cout << "\nNLR: "; NLR(a);
}
