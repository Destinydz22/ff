MÔ TẢ BÀI TOÁN

 

Xóa phần tử có giá trị x trên cây.

Nhắc lại:

Có 3 trường hợp khi hủy nút X :

x là nút lá: Chỉ đơn giản hủy x vì nó không móc nối đến phần tử nào khác

x chỉ có 1 con (trái hoặc phải): Trước khi hủy x, tạo liên kết từ nút cha của x tới nút con duy nhất của nó

x có đủ cả 2 con: Không thể hủy trực tiếp do x có đủ 2 con

Hủy gián tiếp:

B1: Tìm một phần tử thay thế y có tối đa một con.

B2: Lưu nội dung của y vào x.

B3: Huỷ y giống như 2 trường hợp đầu. Thay vì xóa đi vùng nhớ của x thì xóa vùng nhớ của y (y là node thay thế)

YÊU CẦU: CHỌN PHẦN TỬ THAY THẾ LÀ PHẦN TỬ PHẢI NHẤT BÊN NHÁNH TRÁI
 

INPUT

- Một số nguyên dương n, chỉ số nút của cây, 0<n<100

- Dãy gồm n số nguyên, đôi một khác nhau. Các giá trị được thêm vào cây theo thứ tự mà nó được nhập.

- Một số nguyên x là giá trị cần xóa

- Nếu x có xuất hiện trong cây thì chương trình hỏi user có muốn xóa hay không. User gõ vào 1 ký tự để trả lời.

cout<<"\nDo you want to delete "<<x<< "?(y/n):";

OUTPUT

- Xuất cây trước và sau khi xóa x.

- Nếu không xóa được (x không có trong cây) thì xuất thông báo "Not found".




struct node
{
	int info;
	node* left;
	node* right;
};
typedef node* Tree;
node* getnode(int x)
{
	node* p = new node;
	if (p == NULL)
		return NULL;
	p->info = x;
	p->left = p->right = NULL;
	return p;
}
void insert(node*& t, int x)
{
	if (t == NULL)
	{
		node* p = new node;
		p->info = x;
		p->left = NULL;
		p->right = NULL;
		t = p;
	}
	else
	{
		if (x < t->info)
			insert(t->left, x);
		else if (x > t->info)
			insert(t->right, x);
	}
}
void inputTree(Tree& t)
{

	int n, x;
	cin >> n;

	for (int i = 0; i < n; i++)
	{
		cin >> x;
		insert(t, x);
	}
}
void NLR(Tree t)
{
	if (t != NULL)  //dieu kien dung
	{
		cout << t->info << " "; //xu ly tuong ung voi nhu cau
		NLR(t->left); // goi de quy
		NLR(t->right); //goi de quy
	}

}

void SearchStandFor(Tree& p, Tree& q)
{
	if (q->right)
		SearchStandFor(p, q->right);
	else
	{
		p->info = q->info;
		p = q;
		q = q->left;
	}
}
void deleteNode(Tree& t, int x)
{
	if (t != NULL)
	{
		if (t->info < x) deleteNode(t->right, x);
		else
		{
			if (t->info > x) deleteNode(t->left, x);
			else
			{
				cout << "\nDo you want to delete " << x << "?(y/n):";
				char c;
				cin >> c;
				if (c == 'y' || c == 'Y')
				{
					node* p = t;

					if (t->left == NULL) t = t->right;
					else
					{
						if (t->right == NULL) t = t->left;
						else SearchStandFor(p, t->left);
					}
					delete p;
				}
			}
		}
	}

	else
		cout << "Not found";
		
}
