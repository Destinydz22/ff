Tạo cây nhị phân tìm kiếm từ dãy số của mảng a

INPUT:

Dòng đầu tiên chứa số nguyên dương n (n < 1.000.000) là độ dài mảng a

Dòng tiếp theo chứa n số nguyên cách nhau bởi khoảng trắng, là các phần tử của mảng

OUTPUT:

Xuất mảng sau khi nhập và xuất cây được tạo từ mảng theo thứ tự LNR

LƯU Ý: NẾU GIÁ TRỊ BỊ TRÙNG THÌ KHÔNG THÊM VÀO CÂY VÀ XUẤT THÔNG BÁO cout<<"Can not insert "<<x<<endl;



struct Node
{
	int info;
	Node* left;
	Node* right;
};
typedef Node* Tree;
Node* getnode(int x)
{
	Node* p = new Node;
	if (p == NULL)
		return NULL;
	p->info = x;
	p->left = p->right = NULL;
	return p;
}
Node* Search(Node* t, int x)
{
	if (t != NULL)
	{
		if (t->info == x)
			return t;
		if (x < t->info)
			return Search(t->left, x); // return co nghia la den dich roi khong can tim nua, neu ko co reuturn thi co the se tim them o dau do nua
		return Search(t->right, x);
	}
	return NULL;
}
void insert(Node*& t, int x)
{
	if (t == NULL)
	{
		Node* p = new Node;
		p->info = x;
		p->left = NULL;
		p->right = NULL;
		t = p;
	}
	else
	{
		if (x < t->info)
			insert(t->left, x);
		else if (x > t->info)
			insert(t->right, x);
		else
			cout << "Can not insert " << x << endl;
	}
}
void inputTree(Tree& t, int a[], int n)
{

	int  x;

	for (int i = 0; i < n; i++)
	{
		insert(t, a[i]);
	}
}
void inputArray(int a[], int n)
{
	for (int i = 0; i < n; i++)
		cin >> a[i];
}
void outputArray(int a[], int n)
{
	for (int i = 0; i < n; i++)
		cout << a[i] << " " ;
}
void LNR(Tree t)
{
	if (t != NULL)  //dieu kien dung
	{
		LNR(t->left); // goi de quy
		cout << t->info << " "; //xu ly tuong ung voi nhu cau
		LNR(t->right); //goi de quy
	}

}
