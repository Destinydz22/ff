MÔ TẢ BÀI TOÁN

Đối với Cây NPTK thì chương trình có thể tạo cây 1 cách tự động từ 1 dãy số cho trước (các gía trị lần lượt được thêm vào cây theo thứ tự được nhập). Tuy nhiên, với 1 cây nhị phân bất kỳ (không nhất thiết là cây NPTK) thì việc tạo cây phải thực hiện thủ công như yêu cầu bên dưới.

Cây nhị phân không có tính chất gì đặc biệt, ngoại trừ mỗi node có tối đa 2 nhánh cây con, cây có thể chứa nhiều giá trị giống nhau, không cần có điều kiện ràng buộc giữa giá trị các node với nhau.

 

INPUT

- Một số nguyên dương n, là giá trị của node gốc, 0<n<100

- Các dòng tiếp theo là 1 bộ gồm có 3 giá trị: đầu tiên là 1 trong 2 ký tự viết hoa 'L' hoặc 'R', kế đến là 2 số nguyên a, b có giá trị không quá 2 tỷ. Ví dụ: L 3 5 có nghĩa là chèn số 5 vào bên trái số 3 trong cây.  R -2 10 có nghĩa là chèn số 10 vào bên trái số -2 trong cây.

- Dòng cuối cùng là 1 ký tự chữ cái không phải 'L' và 'R', cho biết kết thúc việc tạo cây.

Yêu cầu:

- Vì cây có thể lưu trữ nhiều giá trị giống nhau, nếu có nhiều giá trị a trong cây thì chỉ chèn vào giá trị a được tìm thấy đầu tiên theo cơ chế duyệt NLR.

- Nếu a không có trong cây thì không chèn được và xuất thông báo cout<<"Node khong ton tai\n";

- Nếu a (xuất hiện đầu tiên) đã có node con bên phải mà yêu cầu chèn bên phải a thì không chèn được và xuất thông báo cout << "Da co node con ben phai\n";

- Nếu a (xuất hiện đầu tiên) đã có node con bên trái mà yêu cầu chèn bên trái a thì không chèn được và xuất thông báo cout << "Da co node con ben trai\n";


struct node
{
	int info;
	node* left;
	node* right;
};
typedef node* Tree;
node* getNode(int x)
{
	node* p = new node;
	if (p != NULL)
	{
		p->info = x;
		p->left = p->right = NULL;
	}
	return p;
}
node* Search(Tree& t, int x)
{
	if (t != NULL) {
		node* a = Search(t->left, x);
		if (t->info == x) {
			return t;
		}
		node* b = Search(t->right, x);
		if (a)
			return a;
		return b;
	}
	else
		return NULL;
}
void LNR(Tree& t)
{

	if (t != NULL)
	{
		LNR(t->left);
		cout << t->info << " ";
		LNR(t->right);
	}
}
void SetLeft(Tree t, int x)
{
	
	
	node* p = getNode(x);
	if (t == NULL)
	{
		cout << "Node khong ton tai \n";
	}
	else
	{
		if (t->left != NULL)
		{
			cout << "Da co node con ben trai\n";
		}
		else
			t->left = p;
	}
	return;
}
void SetRight(node* t, int x)
{
	
	node* p = getNode(x);
	if (t == NULL)
	{
		cout << "Node khong ton tai\n";
	}
	if (t != NULL)
	{
		if (t->right != NULL)
		{
			cout << "Da co node con ben phai\n";
		}
		else
			t->right = p;
	}
	return;
}
