ƯU ĐIỂM CỦA DSLK ĐÔI SO VỚI DSLK ĐƠN:

- Việc xóa 1 phần tử ra khỏi DSLK ĐÔI được thực hiện linh hoạt và dễ dàng hơn:

+ DSLK đơn: chỉ xóa đầu là dễ, xóa cuối hay xóa tại ví trí bất kỳ nào khác thì khó khăn hơn (phải duyệt ds từ đầu để tìm node đứng liền trước node cần xóa, vì không truy xuất được node đứng liền trước một cách trực tiếp)

+ DSLK đôi: xóa node nào cũng dễ dàng (đầu, cuối, trước q, sau q, node chứa giá trị k)

MÔ TẢ BÀI TOÁN

Viết 1 chương trình game đơn giản như sau:

- Chương trình cho phép người dùng (user) chọn thực hiện 1 thao tác nào đó từ Menu, trả về kết quả thực hiện thao tác đó.

- Thiết kế xử lý việc xóa phần từ đầu hoặc cuối của danh sách.

+Nếu danh sách rỗng thì xuất thông báo cout<<"\nList is empty. Can't delete";

+Nếu danh sách có 1 phần tử thì sau khi xóa cần xuất thông báo cho user biết là danh sách đã trở nên rỗng. Dùng câu lệnh sau: cout<<"\nThe list becomes empty";

+Thông thường, việc xóa dữ liệu cần có sự cân nhắc để tránh trường hợp "lỡ tay gây ra hậu quả nghiêm trọng". Do đó, trước khi thực hiện xóa thì hỏi lại user xem có muốn xóa thật sự không, bằng cách:

cout<<"\nDo you want to delete the first element?(y/n): ";

cout<<"\nDo you want to delete the last element?(y/n): ";

Nếu user chọn y/Y thì mới xóa.  

 
 
 
 
 
 void init(DList& L)
{
    L.pHead = L.pTail = NULL;
}
DNode* CreateNode(int x)
{
    DNode* p = new DNode;
    p->info = x;
    p->pNext = p->pPrev = NULL;
    return p;
}
void addTail(DList& L, int x)
{
    DNode* p = CreateNode(x);
    if (L.pHead == NULL)
        L.pHead = L.pTail = p;
    else
    {
        L.pTail->pNext = p;
        p->pPrev = L.pTail;
        L.pTail = p;
    }
}
void addHead(DList& L, int x)
{
    DNode* p = CreateNode(x);
    if (L.pHead == NULL)
        L.pHead = L.pTail = p;
    else
    {
        p->pNext = L.pHead;
        L.pHead->pPrev = p;
        L.pHead = p;
    }
}
void createList(DList& L)
{
    while (true)
    {
        int x;
        cin >> x;
        if (x == -1)
            break;
        addTail(L, x);
    }
}
void printList(DList L)
{
    if (L.pHead == NULL)
    {
        cout << "List is empty";
        return;
    }
    DNode* pTmp = L.pHead;
    while (pTmp != NULL)
    {
        cout << pTmp->info << " ";
        pTmp = pTmp->pNext;
    }
}
void addAfter(DList& L, int x, int y)
{
    DNode* pTmpx = L.pHead;
    while (pTmpx != NULL)
    {
        if (pTmpx->info == x)
            break;
        pTmpx = pTmpx->pNext;
    }
    if (pTmpx == NULL)
    {
        cout << "\nCan't find the value " << x;
        return;
    }
    else
    {
        DNode* py = CreateNode(y);
        if (pTmpx == L.pTail)
        {
            addTail(L, y);
        }
        else
        {
            DNode* p = pTmpx->pNext;
            py->pNext = p;
            py->pPrev = pTmpx;
            p->pPrev = py;
            pTmpx->pNext = py;
        }
    }
}
void addBefore(DList& L, int x, int y)
{
    DNode* pTmpx = L.pHead;
    while (pTmpx != NULL)
    {
        if (pTmpx->info == x)
            break;
        pTmpx = pTmpx->pNext;
    }
    if (pTmpx == NULL)
    {
        cout << "\nCan't find the value " << x;
        return;
    }
    else
    {
        DNode* py = CreateNode(y);
        if (pTmpx == L.pHead)
        {
            L.pHead->pPrev = py;
            py->pNext = L.pHead;
            L.pHead = py;
        }
        else
        {
            DNode* p = pTmpx->pPrev;
            py->pNext = pTmpx;
            py->pPrev = p;
            pTmpx->pPrev = py;
            p->pNext = py;
        }
    }
}
void addAfterMulti(DList& L, int x, int y)
{
    DNode* px = L.pHead;
    bool kq = false;
    while (px != NULL)
    {
        if (px->info == x)
        {
            if (px == L.pTail)
            {
                addTail(L, y);
            }
            else
            {
                DNode* py = CreateNode(y);
                DNode* p = px->pNext;
                py->pNext = p;
                py->pPrev = px;
                p->pPrev = py;
                px->pNext = py;
            }
            kq = true;
        }
        px = px->pNext;
    }
    if (kq == false)
        cout << "\nCan't find the value " << x;
}
void addBeforeMulti(DList& L, int x, int y)
{
    DNode* px = L.pHead;
    bool kq = false;
    while (px != NULL)
    {
        if (px->info == x)
        {
            if (px == L.pHead)
            {
                addHead(L, y);
            }
            else
            {
                DNode* py = CreateNode(y);
                DNode* p = px->pPrev;
                py->pNext = px;
                py->pPrev = p;
                px->pPrev = py;
                p->pNext = py;
            }
            kq = true;
        }
        px = px->pNext;
    }
    if (kq == false)
        cout << "\nCan't find the value " << x;
}
void removeHead(DList& L)
{
    if (L.pHead == NULL)
    {
        cout << "\nList is empty. Can't delete";
        return;
    }
    char c;
    cout << "\nDo you want to delete the first element?(y/n): ";
    cin >> c;
    if (c == 'y' || c == 'Y')
    {
        if (L.pHead->pNext == NULL)
        {
            L.pHead = L.pTail = NULL;
            cout << "\nThe list becomes empty";
            return;
        }
        DNode* p = L.pHead;
        L.pHead = L.pHead->pNext;
        p->pNext = NULL;
        L.pHead->pPrev = NULL;
        delete p;
    }
}
void removeTail(DList& L)
{
    if (L.pHead == NULL)
    {
        cout << "\nList is empty. Can't delete";
        return;
    }
    char c;
    cout << "\nDo you want to delete the last element?(y/n): ";
    cin >> c;
    if (c == 'y' || c == 'Y')
    {
        if (L.pHead->pNext == NULL)
        {
            L.pHead = L.pTail = NULL;
            cout << "\nThe list becomes empty";
            return;
        }
        DNode* p = L.pTail;
        L.pTail = L.pTail->pPrev;
        p->pPrev = NULL;
        L.pTail->pNext = NULL;
        delete p;
    }
}
